{"version":3,"sources":["components/Home.js","components/Header.js","components/Type.js","components/IncidentItem.js","components/Incident.js","components/Questions.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","src","alt","htmlFor","type","id","to","color","block","Header","text","backLink","size","icon","Type","IncidentItem","title","img","class","style","border","incidents","Incident","map","incident","i","key","Questions","React","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be2994db.chunk.js","sourcesContent":["import React from 'react';\r\nimport {MDBBtn, MDBCol, MDBRow} from \"mdbreact\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <MDBRow>\r\n            <MDBCol>\r\n                <form>\r\n                    <div className=\"text-center\">\r\n                        <img src=\"/logo.png\" alt=\"logo\"/>\r\n                    </div>\r\n                    <label htmlFor=\"defaultFormLoginEmailEx\" className=\"grey-text\">\r\n                        Email\r\n                    </label>\r\n                    <input type=\"email\" id=\"defaultFormLoginEmailEx\" className=\"form-control\"/>\r\n                    <br/>\r\n                    <label htmlFor=\"defaultFormLoginPasswordEx\" className=\"grey-text\">\r\n                        Paswoord\r\n                    </label>\r\n                    <input type=\"password\" id=\"defaultFormLoginPasswordEx\" className=\"form-control\"/>\r\n                    <div className=\"text-center mt-4\">\r\n                        <Link to={\"/type\"}>\r\n                            <MDBBtn color=\"light-blue\" block={true} type=\"submit\">Login</MDBBtn>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n                <br/>\r\n                <hr/>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <img src=\"/kuleuven.png\" className=\"logo\" alt=\"logo\"/>\r\n                    <img src=\"/jensbnt.png\" className=\"logo\" alt=\"logo\"/>\r\n                </div>\r\n            </MDBCol>\r\n        </MDBRow>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {MDBBtn, MDBIcon} from \"mdbreact\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = ({text, backLink}) => {\r\n    return (\r\n        <>\r\n            <div className=\"d-flex align-items-center\">\r\n                <Link to={backLink}>\r\n                    <MDBBtn color={\"light-blue\"} size={\"sm\"} className=\"backButton\">\r\n                        <MDBIcon icon={\"fas fa-chevron-left\"}/>\r\n                    </MDBBtn>\r\n                </Link>\r\n                <h2 className=\"title\">{text}</h2>\r\n            </div>\r\n            <hr/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {MDBBtn} from \"mdbreact\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\n\r\nconst Type = () => {\r\n    return (\r\n        <>\r\n            <Header text={\"Wat wilt u melden?\"} backLink={\"/\"}/>\r\n            <Link to={\"/incident\"}>\r\n                <MDBBtn color=\"light-blue\" block>Incident</MDBBtn>\r\n            </Link>\r\n            <p>bv: Val, prik, etc.</p>\r\n            <Link to={\"/incident\"}>\r\n                <MDBBtn color=\"light-blue\" block>Bijna-incident</MDBBtn>\r\n            </Link>\r\n            <p>bv: Vechten met de popo's</p>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Type;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst IncidentItem = ({title, to, img, color}) => {\r\n    return (\r\n        <>\r\n            <Link to={to} class=\"incident-item\">\r\n                <div className=\"incident-img-wrapper\">\r\n                    <img src={img} alt={title} style={{border: '4px solid ' + color}}/>\r\n                </div>\r\n                <p className=\"incident-desc\">{title}</p>\r\n            </Link>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default IncidentItem;\r\n","import React from 'react';\r\nimport {MDBCol, MDBRow} from \"mdbreact\";\r\nimport Header from \"./Header\";\r\nimport IncidentItem from \"./IncidentItem\";\r\n\r\nconst incidents = [\r\n    {title: 'Agressie', to: '/questions', img: '/incident/fist.png', color: '#2BBBAD'},\r\n    {title: 'Arbeidsongeval', to: '/questions', img: '/incident/helmet.png', color: '#4285F4'},\r\n    {title: 'Brand', to: '/questions', img: '/incident/flame.png', color: '#aa66cc'},\r\n    {title: 'Bijna ongeval', to: '/questions', img: '/incident/accident.png', color: '#ff4444'},\r\n    {title: 'EHBO', to: '/questions', img: '/incident/ehbo.png', color: '#ffbb33'},\r\n    {title: 'Nood', to: '/questions', img: '/incident/sos.png', color: '#00C851'},\r\n    {title: 'Prik-, Snij-, Spatongeval', to: '/questions', img: '/incident/blood.png', color: '#33b5e5'},\r\n    {title: 'Ziekenhuis noodplanning', to: '/questions', img: '/incident/hospital.png', color: '#00695c'},\r\n];\r\n\r\nconst Incident = () => {\r\n    return (\r\n        <>\r\n            <Header text={\"Welk type incident?\"} backLink={\"/type\"}/>\r\n            <MDBRow>\r\n                {incidents.map((incident, i) => {\r\n                    return (\r\n                        <MDBCol key={i} size={4} className=\"incident-col\">\r\n                            <IncidentItem {...incident} />\r\n                        </MDBCol>\r\n                    )\r\n                })}\r\n            </MDBRow>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Incident;\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\n\r\nclass Questions extends React.Component {\r\n    render() {\r\n        return (\r\n            <Header text={\"Vragen\"} backLink={\"/Incident\"}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Questions;\r\n","import React from 'react';\nimport './App.scss'\nimport {MDBContainer} from \"mdbreact\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Type from \"./components/Type\";\nimport Incident from \"./components/Incident\";\nimport Questions from \"./components/Questions\";\n\nfunction App() {\n    return (\n        <MDBContainer>\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route exact path=\"/type\" component={Type}/>\n                    <Route exact path=\"/incident\" component={Incident}/>\n                    <Route exact path=\"/questions\" component={Questions}/>\n                </Switch>\n            </HashRouter>\n        </MDBContainer>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}